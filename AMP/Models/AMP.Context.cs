//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AMPEntities : DbContext
    {
        public AMPEntities()
            : base("name=AMPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ComponentDate> ComponentDates { get; set; }
        public virtual DbSet<ComponentMaster> ComponentMasters { get; set; }
        public virtual DbSet<DeliveryChain> DeliveryChains { get; set; }
        public virtual DbSet<ImplementingOrganisation> ImplementingOrganisations { get; set; }
        public virtual DbSet<InputSectorCode> InputSectorCodes { get; set; }
        public virtual DbSet<Marker> Markers { get; set; }
        public virtual DbSet<PartnerMaster> PartnerMasters { get; set; }
        public virtual DbSet<TBL_Classifications> TBL_Classifications { get; set; }
        public virtual DbSet<TBL_Contracts> TBL_Contracts { get; set; }
        public virtual DbSet<TBL_Country> TBL_Country { get; set; }
        public virtual DbSet<TBL_LOC> TBL_LOC { get; set; }
        public virtual DbSet<TBL_LOC_Contract> TBL_LOC_Contract { get; set; }
        public virtual DbSet<TBL_LOC_Project> TBL_LOC_Project { get; set; }
        public virtual DbSet<TBL_Projects> TBL_Projects { get; set; }
        public virtual DbSet<TBL_Projects_PQ> TBL_Projects_PQ { get; set; }
        public virtual DbSet<TBL_StakeHolders> TBL_StakeHolders { get; set; }
        public virtual DbSet<TBL_Status> TBL_Status { get; set; }
        public virtual DbSet<TBL_Terms> TBL_Terms { get; set; }
        public virtual DbSet<TBL_Terms_Country> TBL_Terms_Country { get; set; }
        public virtual DbSet<CountryCode> CountryCodes { get; set; }
        public virtual DbSet<GeoCode> GeoCodes { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<Precision> Precisions { get; set; }
        public virtual DbSet<AuditedFinancialStatement> AuditedFinancialStatements { get; set; }
        public virtual DbSet<ConditionalityReview> ConditionalityReviews { get; set; }
        public virtual DbSet<DSOMarker> DSOMarkers { get; set; }
        public virtual DbSet<Evaluation> Evaluations { get; set; }
        public virtual DbSet<EvaluationDocument> EvaluationDocuments { get; set; }
        public virtual DbSet<Markers1> Markers1 { get; set; }
        public virtual DbSet<OverallRiskRating> OverallRiskRatings { get; set; }
        public virtual DbSet<Performance> Performances { get; set; }
        public virtual DbSet<ProjectDate> ProjectDates { get; set; }
        public virtual DbSet<ProjectInfo> ProjectInfoes { get; set; }
        public virtual DbSet<ProjectMaster> ProjectMasters { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReviewARScore> ReviewARScores { get; set; }
        public virtual DbSet<ReviewDeferral> ReviewDeferrals { get; set; }
        public virtual DbSet<ReviewDocument> ReviewDocuments { get; set; }
        public virtual DbSet<ReviewExemption> ReviewExemptions { get; set; }
        public virtual DbSet<ReviewMaster> ReviewMasters { get; set; }
        public virtual DbSet<ReviewOutput> ReviewOutputs { get; set; }
        public virtual DbSet<ReviewPCRScore> ReviewPCRScores { get; set; }
        public virtual DbSet<ReviewScore> ReviewScores { get; set; }
        public virtual DbSet<ReviewStage> ReviewStages { get; set; }
        public virtual DbSet<RiskDocument> RiskDocuments { get; set; }
        public virtual DbSet<RiskRegister> RiskRegisters { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamExternal> TeamExternals { get; set; }
        public virtual DbSet<OutputIndicator> OutputIndicators { get; set; }
        public virtual DbSet<OutputIndicatorMilestone> OutputIndicatorMilestones { get; set; }
        public virtual DbSet<ProjectOutput> ProjectOutputs { get; set; }
        public virtual DbSet<AuditedFinancialStatements1> AuditedFinancialStatements1 { get; set; }
        public virtual DbSet<ComponentDates1> ComponentDates1 { get; set; }
        public virtual DbSet<ComponentDeliveryChain> ComponentDeliveryChains { get; set; }
        public virtual DbSet<ComponentMaster1> ComponentMaster1 { get; set; }
        public virtual DbSet<Evaluation1> Evaluation1 { get; set; }
        public virtual DbSet<ImplementingOrganisation1> ImplementingOrganisation1 { get; set; }
        public virtual DbSet<InputSectorCodes1> InputSectorCodes1 { get; set; }
        public virtual DbSet<Markers2> Markers2 { get; set; }
        public virtual DbSet<ProjectDates1> ProjectDates1 { get; set; }
        public virtual DbSet<ProjectMarker> ProjectMarkers { get; set; }
        public virtual DbSet<ProjectMaster1> ProjectMaster1 { get; set; }
        public virtual DbSet<Team1> Team1 { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<BenefitingCountry> BenefitingCountries { get; set; }
        public virtual DbSet<BudgetCentre> BudgetCentres { get; set; }
        public virtual DbSet<CodePerformance> CodePerformances { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<EvaluationManagement> EvaluationManagements { get; set; }
        public virtual DbSet<EvaluationType> EvaluationTypes { get; set; }
        public virtual DbSet<ExemptionReason> ExemptionReasons { get; set; }
        public virtual DbSet<FundingArrangement> FundingArrangements { get; set; }
        public virtual DbSet<FundingMech> FundingMeches { get; set; }
        public virtual DbSet<FundingMechToSector> FundingMechToSectors { get; set; }
        public virtual DbSet<InputSector> InputSectors { get; set; }
        public virtual DbSet<Logging> Loggings { get; set; }
        public virtual DbSet<PartnerOrganisation> PartnerOrganisations { get; set; }
        public virtual DbSet<Portfolio> Portfolios { get; set; }
        public virtual DbSet<ProjectRole> ProjectRoles { get; set; }
        public virtual DbSet<Risk> Risks { get; set; }
        public virtual DbSet<RiskCategory> RiskCategories { get; set; }
        public virtual DbSet<RiskImpact> RiskImpacts { get; set; }
        public virtual DbSet<RiskLikelihood> RiskLikelihoods { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<UserLookUp> UserLookUps { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ProjectPlannedEndDate> ProjectPlannedEndDates { get; set; }
        public virtual DbSet<WorkflowDocument> WorkflowDocuments { get; set; }
        public virtual DbSet<WorkflowMaster1> WorkflowMaster1 { get; set; }
        public virtual DbSet<WorkflowStage> WorkflowStages { get; set; }
        public virtual DbSet<WorkflowTask> WorkflowTasks { get; set; }
        public virtual DbSet<zComponentMaster_PreCR1515045> zComponentMaster_PreCR1515045 { get; set; }
        public virtual DbSet<zDeliveryChain_PreCR1292793> zDeliveryChain_PreCR1292793 { get; set; }
        public virtual DbSet<AuditedFinancialStatementsTemp> AuditedFinancialStatementsTemps { get; set; }
        public virtual DbSet<Deferral> Deferrals { get; set; }
        public virtual DbSet<DeferralReason> DeferralReasons { get; set; }
        public virtual DbSet<EvaluationDocumentsTemp> EvaluationDocumentsTemps { get; set; }
        public virtual DbSet<ProjectBudgetCentreOrgUnit> ProjectBudgetCentreOrgUnits { get; set; }
        public virtual DbSet<ReviewDocumentsTemp> ReviewDocumentsTemps { get; set; }
        public virtual DbSet<RiskDocumentTemp> RiskDocumentTemps { get; set; }
        public virtual DbSet<AuditedFinancialStatementsTemp1> AuditedFinancialStatementsTemp1 { get; set; }
        public virtual DbSet<ComponentDeliveryChainBackup> ComponentDeliveryChainBackups { get; set; }
        public virtual DbSet<Performance1> Performance1 { get; set; }
        public virtual DbSet<ProjectInfo1> ProjectInfo1 { get; set; }
        public virtual DbSet<ReviewARScore1> ReviewARScore1 { get; set; }
        public virtual DbSet<ReviewDeferral1> ReviewDeferral1 { get; set; }
        public virtual DbSet<ReviewDocuments1> ReviewDocuments1 { get; set; }
        public virtual DbSet<ReviewDocumentsTemp1> ReviewDocumentsTemp1 { get; set; }
        public virtual DbSet<ReviewExemption1> ReviewExemption1 { get; set; }
        public virtual DbSet<ReviewMaster1> ReviewMaster1 { get; set; }
        public virtual DbSet<ReviewOutputs1> ReviewOutputs1 { get; set; }
        public virtual DbSet<ReviewPCRScore1> ReviewPCRScore1 { get; set; }
        public virtual DbSet<RiskDocument1> RiskDocument1 { get; set; }
        public virtual DbSet<RiskDocumentTemp1> RiskDocumentTemp1 { get; set; }
        public virtual DbSet<RiskRegister1> RiskRegister1 { get; set; }
        public virtual DbSet<WorkflowMaster> WorkflowMasters { get; set; }
        public virtual DbSet<ComponentDateHashtable> ComponentDateHashtables { get; set; }
        public virtual DbSet<ComponentDates2> ComponentDates2 { get; set; }
        public virtual DbSet<ComponentHashtable> ComponentHashtables { get; set; }
        public virtual DbSet<DateHashTable> DateHashTables { get; set; }
        public virtual DbSet<ProjectHashtable> ProjectHashtables { get; set; }
        public virtual DbSet<ProjectInfoTable> ProjectInfoTables { get; set; }
        public virtual DbSet<ProjectTeamHash> ProjectTeamHashes { get; set; }
        public virtual DbSet<WorkflowDocumentsTemp> WorkflowDocumentsTemps { get; set; }
        public virtual DbSet<vAMPAlert> vAMPAlerts { get; set; }
        public virtual DbSet<vAMPTask> vAMPTasks { get; set; }
        public virtual DbSet<V_ProjectClosure> V_ProjectClosure { get; set; }
        public virtual DbSet<TBL_Contacts> TBL_Contacts { get; set; }
        public virtual DbSet<TBL_ContactTypes> TBL_ContactTypes { get; set; }
        public virtual DbSet<TBL_Project_Contacts> TBL_Project_Contacts { get; set; }
        public virtual DbSet<TBL_AuditLogs> TBL_AuditLogs { get; set; }
        public virtual DbSet<TBL_ProjectLogs> TBL_ProjectLogs { get; set; }
        public virtual DbSet<TBL_ProjectTimeLines> TBL_ProjectTimeLines { get; set; }
        public virtual DbSet<TBL_Files> TBL_Files { get; set; }
        public virtual DbSet<Finacle_LocDetails> Finacle_LocDetails { get; set; }
        public virtual DbSet<Finacle_RepaymentSchedule> Finacle_RepaymentSchedule { get; set; }
        public virtual DbSet<Finacle_AMDemands> Finacle_AMDemands { get; set; }
        public virtual DbSet<Finacle_CGS> Finacle_CGS { get; set; }
        public virtual DbSet<Finacle_Contracts> Finacle_Contracts { get; set; }
        public virtual DbSet<Finacle_Disbursement> Finacle_Disbursement { get; set; }
        public virtual DbSet<BobEProcure_Packages> BobEProcure_Packages { get; set; }
        public virtual DbSet<BobEProcure_Status> BobEProcure_Status { get; set; }
        public virtual DbSet<BobEProcure_Vendors> BobEProcure_Vendors { get; set; }
        public virtual DbSet<TBL_Roles> TBL_Roles { get; set; }
        public virtual DbSet<TBL_UserRoleMap> TBL_UserRoleMap { get; set; }
        public virtual DbSet<TBL_Users> TBL_Users { get; set; }
        public virtual DbSet<TBL_Logs> TBL_Logs { get; set; }
        public virtual DbSet<TBL_Options> TBL_Options { get; set; }
        public virtual DbSet<TBL_ContractContent> TBL_ContractContent { get; set; }
        public virtual DbSet<TBL_ContractLC> TBL_ContractLC { get; set; }
        public virtual DbSet<TBL_ContractLocMap> TBL_ContractLocMap { get; set; }
        public virtual DbSet<TBL_ContractResponsibility> TBL_ContractResponsibility { get; set; }
        public virtual DbSet<TBL_ContractTerms> TBL_ContractTerms { get; set; }
        public virtual DbSet<Finacle_InterestDue> Finacle_InterestDue { get; set; }
        public virtual DbSet<Finacle_PrincipalDue> Finacle_PrincipalDue { get; set; }
        public virtual DbSet<Finacle_LocTransactions> Finacle_LocTransactions { get; set; }
        public virtual DbSet<TBL_LOC_Amendments> TBL_LOC_Amendments { get; set; }
        public virtual DbSet<Finacle_Contract_Transanctions> Finacle_Contract_Transanctions { get; set; }
        public virtual DbSet<TBL_Activity> TBL_Activity { get; set; }
        public virtual DbSet<TBL_LocBalance> TBL_LocBalance { get; set; }
        public virtual DbSet<TBl_TeamMapping> TBl_TeamMapping { get; set; }
        public virtual DbSet<TBL_ProjectLocations> TBL_ProjectLocations { get; set; }
        public virtual DbSet<TBL_SyncLog> TBL_SyncLog { get; set; }
        public virtual DbSet<TBL_String_Mapper> TBL_String_Mapper { get; set; }
        public virtual DbSet<Finacle_LocFinancials> Finacle_LocFinancials { get; set; }
        public virtual DbSet<TBL_Regions> TBL_Regions { get; set; }
        public virtual DbSet<Tbl_Applicants> Tbl_Applicants { get; set; }
        public virtual DbSet<report_LOC> report_LOC { get; set; }
        public virtual DbSet<report_Project> report_Project { get; set; }
        public virtual DbSet<TBL_MailBody> TBL_MailBody { get; set; }
        public virtual DbSet<TBL_EmailRules> TBL_EmailRules { get; set; }
        public virtual DbSet<TBL_RuleTransactions> TBL_RuleTransactions { get; set; }
        public virtual DbSet<TBL_EmailSchedule> TBL_EmailSchedule { get; set; }
    
        public virtual ObjectResult<Add_ProjectToLOC_Result> Add_ProjectToLOC(Nullable<decimal> allocation, Nullable<int> locid, Nullable<int> projectid)
        {
            var allocationParameter = allocation.HasValue ?
                new ObjectParameter("allocation", allocation) :
                new ObjectParameter("allocation", typeof(decimal));
    
            var locidParameter = locid.HasValue ?
                new ObjectParameter("locid", locid) :
                new ObjectParameter("locid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Add_ProjectToLOC_Result>("Add_ProjectToLOC", allocationParameter, locidParameter, projectidParameter);
        }
    
        public virtual ObjectResult<AddFiles_Result> AddFiles(string src, string fileFor, Nullable<int> recordId, string displayname, Nullable<int> userid)
        {
            var srcParameter = src != null ?
                new ObjectParameter("src", src) :
                new ObjectParameter("src", typeof(string));
    
            var fileForParameter = fileFor != null ?
                new ObjectParameter("fileFor", fileFor) :
                new ObjectParameter("fileFor", typeof(string));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("recordId", recordId) :
                new ObjectParameter("recordId", typeof(int));
    
            var displaynameParameter = displayname != null ?
                new ObjectParameter("displayname", displayname) :
                new ObjectParameter("displayname", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddFiles_Result>("AddFiles", srcParameter, fileForParameter, recordIdParameter, displaynameParameter, useridParameter);
        }
    
        public virtual ObjectResult<AddProject_Result> AddProject(Nullable<int> id, string name, string description, Nullable<int> status, Nullable<System.DateTime> dprDate, string baselineData, string locationAddress, string locationCordinates, Nullable<int> stage, Nullable<int> subSector, Nullable<bool> preQualification, string authority, Nullable<double> progress, Nullable<double> financialprogress, Nullable<decimal> projectValue, Nullable<System.DateTime> projectStart, Nullable<System.DateTime> projectEnd, string sector, string subsectorname, string address, string note, Nullable<double> physicalprogress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var dprDateParameter = dprDate.HasValue ?
                new ObjectParameter("dprDate", dprDate) :
                new ObjectParameter("dprDate", typeof(System.DateTime));
    
            var baselineDataParameter = baselineData != null ?
                new ObjectParameter("baselineData", baselineData) :
                new ObjectParameter("baselineData", typeof(string));
    
            var locationAddressParameter = locationAddress != null ?
                new ObjectParameter("locationAddress", locationAddress) :
                new ObjectParameter("locationAddress", typeof(string));
    
            var locationCordinatesParameter = locationCordinates != null ?
                new ObjectParameter("locationCordinates", locationCordinates) :
                new ObjectParameter("locationCordinates", typeof(string));
    
            var stageParameter = stage.HasValue ?
                new ObjectParameter("stage", stage) :
                new ObjectParameter("stage", typeof(int));
    
            var subSectorParameter = subSector.HasValue ?
                new ObjectParameter("subSector", subSector) :
                new ObjectParameter("subSector", typeof(int));
    
            var preQualificationParameter = preQualification.HasValue ?
                new ObjectParameter("preQualification", preQualification) :
                new ObjectParameter("preQualification", typeof(bool));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("authority", authority) :
                new ObjectParameter("authority", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("progress", progress) :
                new ObjectParameter("progress", typeof(double));
    
            var financialprogressParameter = financialprogress.HasValue ?
                new ObjectParameter("financialprogress", financialprogress) :
                new ObjectParameter("financialprogress", typeof(double));
    
            var projectValueParameter = projectValue.HasValue ?
                new ObjectParameter("projectValue", projectValue) :
                new ObjectParameter("projectValue", typeof(decimal));
    
            var projectStartParameter = projectStart.HasValue ?
                new ObjectParameter("projectStart", projectStart) :
                new ObjectParameter("projectStart", typeof(System.DateTime));
    
            var projectEndParameter = projectEnd.HasValue ?
                new ObjectParameter("projectEnd", projectEnd) :
                new ObjectParameter("projectEnd", typeof(System.DateTime));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(string));
    
            var subsectornameParameter = subsectorname != null ?
                new ObjectParameter("subsectorname", subsectorname) :
                new ObjectParameter("subsectorname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var physicalprogressParameter = physicalprogress.HasValue ?
                new ObjectParameter("physicalprogress", physicalprogress) :
                new ObjectParameter("physicalprogress", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddProject_Result>("AddProject", idParameter, nameParameter, descriptionParameter, statusParameter, dprDateParameter, baselineDataParameter, locationAddressParameter, locationCordinatesParameter, stageParameter, subSectorParameter, preQualificationParameter, authorityParameter, progressParameter, financialprogressParameter, projectValueParameter, projectStartParameter, projectEndParameter, sectorParameter, subsectornameParameter, addressParameter, noteParameter, physicalprogressParameter);
        }
    
        public virtual ObjectResult<AddUpdate_Contract_Result> AddUpdate_Contract(Nullable<int> id, string contractName, string typeOfPackage, Nullable<decimal> estimateValue, string contractorCIF, string cGS, Nullable<int> pqId, Nullable<System.DateTime> start, Nullable<System.DateTime> end, string note, Nullable<System.DateTime> scheduledDate, Nullable<System.DateTime> contractApprovalDate, Nullable<System.DateTime> revisedCompletionDate, Nullable<System.DateTime> actualCompletionDate, Nullable<System.DateTime> terminalDateOfDisbursement, Nullable<System.DateTime> dateOfReceiptOfContractByEximBank, Nullable<System.DateTime> siginingDate, Nullable<System.DateTime> signEffectiveDate, Nullable<int> durationYear, Nullable<int> durationMonth, Nullable<int> durationDay)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var contractNameParameter = contractName != null ?
                new ObjectParameter("ContractName", contractName) :
                new ObjectParameter("ContractName", typeof(string));
    
            var typeOfPackageParameter = typeOfPackage != null ?
                new ObjectParameter("TypeOfPackage", typeOfPackage) :
                new ObjectParameter("TypeOfPackage", typeof(string));
    
            var estimateValueParameter = estimateValue.HasValue ?
                new ObjectParameter("EstimateValue", estimateValue) :
                new ObjectParameter("EstimateValue", typeof(decimal));
    
            var contractorCIFParameter = contractorCIF != null ?
                new ObjectParameter("ContractorCIF", contractorCIF) :
                new ObjectParameter("ContractorCIF", typeof(string));
    
            var cGSParameter = cGS != null ?
                new ObjectParameter("CGS", cGS) :
                new ObjectParameter("CGS", typeof(string));
    
            var pqIdParameter = pqId.HasValue ?
                new ObjectParameter("PqId", pqId) :
                new ObjectParameter("PqId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("scheduledDate", scheduledDate) :
                new ObjectParameter("scheduledDate", typeof(System.DateTime));
    
            var contractApprovalDateParameter = contractApprovalDate.HasValue ?
                new ObjectParameter("ContractApprovalDate", contractApprovalDate) :
                new ObjectParameter("ContractApprovalDate", typeof(System.DateTime));
    
            var revisedCompletionDateParameter = revisedCompletionDate.HasValue ?
                new ObjectParameter("RevisedCompletionDate", revisedCompletionDate) :
                new ObjectParameter("RevisedCompletionDate", typeof(System.DateTime));
    
            var actualCompletionDateParameter = actualCompletionDate.HasValue ?
                new ObjectParameter("ActualCompletionDate", actualCompletionDate) :
                new ObjectParameter("ActualCompletionDate", typeof(System.DateTime));
    
            var terminalDateOfDisbursementParameter = terminalDateOfDisbursement.HasValue ?
                new ObjectParameter("TerminalDateOfDisbursement", terminalDateOfDisbursement) :
                new ObjectParameter("TerminalDateOfDisbursement", typeof(System.DateTime));
    
            var dateOfReceiptOfContractByEximBankParameter = dateOfReceiptOfContractByEximBank.HasValue ?
                new ObjectParameter("DateOfReceiptOfContractByEximBank", dateOfReceiptOfContractByEximBank) :
                new ObjectParameter("DateOfReceiptOfContractByEximBank", typeof(System.DateTime));
    
            var siginingDateParameter = siginingDate.HasValue ?
                new ObjectParameter("SiginingDate", siginingDate) :
                new ObjectParameter("SiginingDate", typeof(System.DateTime));
    
            var signEffectiveDateParameter = signEffectiveDate.HasValue ?
                new ObjectParameter("SignEffectiveDate", signEffectiveDate) :
                new ObjectParameter("SignEffectiveDate", typeof(System.DateTime));
    
            var durationYearParameter = durationYear.HasValue ?
                new ObjectParameter("DurationYear", durationYear) :
                new ObjectParameter("DurationYear", typeof(int));
    
            var durationMonthParameter = durationMonth.HasValue ?
                new ObjectParameter("DurationMonth", durationMonth) :
                new ObjectParameter("DurationMonth", typeof(int));
    
            var durationDayParameter = durationDay.HasValue ?
                new ObjectParameter("DurationDay", durationDay) :
                new ObjectParameter("DurationDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdate_Contract_Result>("AddUpdate_Contract", idParameter, contractNameParameter, typeOfPackageParameter, estimateValueParameter, contractorCIFParameter, cGSParameter, pqIdParameter, startParameter, endParameter, noteParameter, scheduledDateParameter, contractApprovalDateParameter, revisedCompletionDateParameter, actualCompletionDateParameter, terminalDateOfDisbursementParameter, dateOfReceiptOfContractByEximBankParameter, siginingDateParameter, signEffectiveDateParameter, durationYearParameter, durationMonthParameter, durationDayParameter);
        }
    
        public virtual ObjectResult<AddUpdate_ProjectTimelines_Result> AddUpdate_ProjectTimelines(Nullable<int> id, Nullable<int> projectId, string timelineTitle, Nullable<System.DateTime> timelineDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var timelineTitleParameter = timelineTitle != null ?
                new ObjectParameter("timelineTitle", timelineTitle) :
                new ObjectParameter("timelineTitle", typeof(string));
    
            var timelineDateParameter = timelineDate.HasValue ?
                new ObjectParameter("timelineDate", timelineDate) :
                new ObjectParameter("timelineDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdate_ProjectTimelines_Result>("AddUpdate_ProjectTimelines", idParameter, projectIdParameter, timelineTitleParameter, timelineDateParameter);
        }
    
        public virtual ObjectResult<AddUpdateContact_Result> AddUpdateContact(Nullable<int> contactId, string name, string landline, string mobile, string fax, string email, string addrline1, string addrline2, string city, string pincode, Nullable<int> countryId, Nullable<int> contactTypeId, string organization, string designation)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var landlineParameter = landline != null ?
                new ObjectParameter("landline", landline) :
                new ObjectParameter("landline", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addrline1Parameter = addrline1 != null ?
                new ObjectParameter("addrline1", addrline1) :
                new ObjectParameter("addrline1", typeof(string));
    
            var addrline2Parameter = addrline2 != null ?
                new ObjectParameter("addrline2", addrline2) :
                new ObjectParameter("addrline2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("contactTypeId", contactTypeId) :
                new ObjectParameter("contactTypeId", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("organization", organization) :
                new ObjectParameter("organization", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdateContact_Result>("AddUpdateContact", contactIdParameter, nameParameter, landlineParameter, mobileParameter, faxParameter, emailParameter, addrline1Parameter, addrline2Parameter, cityParameter, pincodeParameter, countryIdParameter, contactTypeIdParameter, organizationParameter, designationParameter);
        }
    
        public virtual ObjectResult<CreateUpdate_Loc_Result> CreateUpdate_Loc(Nullable<System.DateTime> signingDate, Nullable<System.DateTime> terminalDate, Nullable<System.DateTime> meaDate, Nullable<System.DateTime> mdDate, Nullable<System.DateTime> offerDate, string omNumber, Nullable<double> amountAllocated, Nullable<double> interest, Nullable<double> commitmentFee, Nullable<double> managementFee, string equalization, Nullable<double> mea_percentage, Nullable<double> dea_percentage, string approvalType, Nullable<int> tenure, Nullable<int> moratorium, Nullable<double> indianContribution, string purpose, Nullable<int> locId, Nullable<int> countryId, Nullable<int> approvalBy, Nullable<System.DateTime> approvalDate, Nullable<int> ammendmentNumber, Nullable<System.DateTime> goiDeedDate, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> aggrementAmmendDate, string name, string locNumber, string locAccountNumber, string mea_type, string dea_type, string classification, Nullable<System.DateTime> deadate, string specialcondition, string user, string vnote, string anote, string interesttype)
        {
            var signingDateParameter = signingDate.HasValue ?
                new ObjectParameter("signingDate", signingDate) :
                new ObjectParameter("signingDate", typeof(System.DateTime));
    
            var terminalDateParameter = terminalDate.HasValue ?
                new ObjectParameter("terminalDate", terminalDate) :
                new ObjectParameter("terminalDate", typeof(System.DateTime));
    
            var meaDateParameter = meaDate.HasValue ?
                new ObjectParameter("meaDate", meaDate) :
                new ObjectParameter("meaDate", typeof(System.DateTime));
    
            var mdDateParameter = mdDate.HasValue ?
                new ObjectParameter("mdDate", mdDate) :
                new ObjectParameter("mdDate", typeof(System.DateTime));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("offerDate", offerDate) :
                new ObjectParameter("offerDate", typeof(System.DateTime));
    
            var omNumberParameter = omNumber != null ?
                new ObjectParameter("omNumber", omNumber) :
                new ObjectParameter("omNumber", typeof(string));
    
            var amountAllocatedParameter = amountAllocated.HasValue ?
                new ObjectParameter("amountAllocated", amountAllocated) :
                new ObjectParameter("amountAllocated", typeof(double));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("interest", interest) :
                new ObjectParameter("interest", typeof(double));
    
            var commitmentFeeParameter = commitmentFee.HasValue ?
                new ObjectParameter("commitmentFee", commitmentFee) :
                new ObjectParameter("commitmentFee", typeof(double));
    
            var managementFeeParameter = managementFee.HasValue ?
                new ObjectParameter("managementFee", managementFee) :
                new ObjectParameter("managementFee", typeof(double));
    
            var equalizationParameter = equalization != null ?
                new ObjectParameter("equalization", equalization) :
                new ObjectParameter("equalization", typeof(string));
    
            var mea_percentageParameter = mea_percentage.HasValue ?
                new ObjectParameter("mea_percentage", mea_percentage) :
                new ObjectParameter("mea_percentage", typeof(double));
    
            var dea_percentageParameter = dea_percentage.HasValue ?
                new ObjectParameter("dea_percentage", dea_percentage) :
                new ObjectParameter("dea_percentage", typeof(double));
    
            var approvalTypeParameter = approvalType != null ?
                new ObjectParameter("approvalType", approvalType) :
                new ObjectParameter("approvalType", typeof(string));
    
            var tenureParameter = tenure.HasValue ?
                new ObjectParameter("tenure", tenure) :
                new ObjectParameter("tenure", typeof(int));
    
            var moratoriumParameter = moratorium.HasValue ?
                new ObjectParameter("moratorium", moratorium) :
                new ObjectParameter("moratorium", typeof(int));
    
            var indianContributionParameter = indianContribution.HasValue ?
                new ObjectParameter("indianContribution", indianContribution) :
                new ObjectParameter("indianContribution", typeof(double));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("purpose", purpose) :
                new ObjectParameter("purpose", typeof(string));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var approvalByParameter = approvalBy.HasValue ?
                new ObjectParameter("approvalBy", approvalBy) :
                new ObjectParameter("approvalBy", typeof(int));
    
            var approvalDateParameter = approvalDate.HasValue ?
                new ObjectParameter("approvalDate", approvalDate) :
                new ObjectParameter("approvalDate", typeof(System.DateTime));
    
            var ammendmentNumberParameter = ammendmentNumber.HasValue ?
                new ObjectParameter("ammendmentNumber", ammendmentNumber) :
                new ObjectParameter("ammendmentNumber", typeof(int));
    
            var goiDeedDateParameter = goiDeedDate.HasValue ?
                new ObjectParameter("goiDeedDate", goiDeedDate) :
                new ObjectParameter("goiDeedDate", typeof(System.DateTime));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("effectiveDate", effectiveDate) :
                new ObjectParameter("effectiveDate", typeof(System.DateTime));
    
            var aggrementAmmendDateParameter = aggrementAmmendDate.HasValue ?
                new ObjectParameter("aggrementAmmendDate", aggrementAmmendDate) :
                new ObjectParameter("aggrementAmmendDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var locNumberParameter = locNumber != null ?
                new ObjectParameter("locNumber", locNumber) :
                new ObjectParameter("locNumber", typeof(string));
    
            var locAccountNumberParameter = locAccountNumber != null ?
                new ObjectParameter("locAccountNumber", locAccountNumber) :
                new ObjectParameter("locAccountNumber", typeof(string));
    
            var mea_typeParameter = mea_type != null ?
                new ObjectParameter("mea_type", mea_type) :
                new ObjectParameter("mea_type", typeof(string));
    
            var dea_typeParameter = dea_type != null ?
                new ObjectParameter("dea_type", dea_type) :
                new ObjectParameter("dea_type", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("classification", classification) :
                new ObjectParameter("classification", typeof(string));
    
            var deadateParameter = deadate.HasValue ?
                new ObjectParameter("deadate", deadate) :
                new ObjectParameter("deadate", typeof(System.DateTime));
    
            var specialconditionParameter = specialcondition != null ?
                new ObjectParameter("specialcondition", specialcondition) :
                new ObjectParameter("specialcondition", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var vnoteParameter = vnote != null ?
                new ObjectParameter("vnote", vnote) :
                new ObjectParameter("vnote", typeof(string));
    
            var anoteParameter = anote != null ?
                new ObjectParameter("anote", anote) :
                new ObjectParameter("anote", typeof(string));
    
            var interesttypeParameter = interesttype != null ?
                new ObjectParameter("interesttype", interesttype) :
                new ObjectParameter("interesttype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateUpdate_Loc_Result>("CreateUpdate_Loc", signingDateParameter, terminalDateParameter, meaDateParameter, mdDateParameter, offerDateParameter, omNumberParameter, amountAllocatedParameter, interestParameter, commitmentFeeParameter, managementFeeParameter, equalizationParameter, mea_percentageParameter, dea_percentageParameter, approvalTypeParameter, tenureParameter, moratoriumParameter, indianContributionParameter, purposeParameter, locIdParameter, countryIdParameter, approvalByParameter, approvalDateParameter, ammendmentNumberParameter, goiDeedDateParameter, effectiveDateParameter, aggrementAmmendDateParameter, nameParameter, locNumberParameter, locAccountNumberParameter, mea_typeParameter, dea_typeParameter, classificationParameter, deadateParameter, specialconditionParameter, userParameter, vnoteParameter, anoteParameter, interesttypeParameter);
        }
    
        public virtual int Get_Contract_Types()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Contract_Types");
        }
    
        public virtual ObjectResult<GetLocs_Result> GetLocs(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocs_Result>("GetLocs", idParameter);
        }
    
        public virtual ObjectResult<GetProjectContracts_Result> GetProjectContracts(Nullable<int> projectId, Nullable<int> pqId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var pqIdParameter = pqId.HasValue ?
                new ObjectParameter("pqId", pqId) :
                new ObjectParameter("pqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectContracts_Result>("GetProjectContracts", projectIdParameter, pqIdParameter);
        }
    
        public virtual ObjectResult<string> GetProjectCountries(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProjectCountries", projectIdParameter);
        }
    
        public virtual ObjectResult<GetProjectList_Result> GetProjectList(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectList_Result>("GetProjectList", nameParameter);
        }
    
        public virtual ObjectResult<LinkProjectContacts_Result> LinkProjectContacts(Nullable<int> projectId, Nullable<int> contactId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LinkProjectContacts_Result>("LinkProjectContacts", projectIdParameter, contactIdParameter);
        }
    
        public virtual ObjectResult<report_LOC_Details_Result> report_LOC_Details(string region, string country)
        {
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_LOC_Details_Result>("report_LOC_Details", regionParameter, countryParameter);
        }
    
        public virtual int report_LOC_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report_LOC_List");
        }
    
        public virtual int report_Test_1(string loc_Account_NO)
        {
            var loc_Account_NOParameter = loc_Account_NO != null ?
                new ObjectParameter("Loc_Account_NO", loc_Account_NO) :
                new ObjectParameter("Loc_Account_NO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report_Test_1", loc_Account_NOParameter);
        }
    
        public virtual int Update_Project_Contracts(Nullable<int> projectId, string packageId, string packageName, string packageDisplayId, string estimateValue, string typeOfPackage, string pQNo, string pQId, string @ref, string title, string country, string status, string locNumber, string locAmount, string noOfPackage)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var packageDisplayIdParameter = packageDisplayId != null ?
                new ObjectParameter("PackageDisplayId", packageDisplayId) :
                new ObjectParameter("PackageDisplayId", typeof(string));
    
            var estimateValueParameter = estimateValue != null ?
                new ObjectParameter("EstimateValue", estimateValue) :
                new ObjectParameter("EstimateValue", typeof(string));
    
            var typeOfPackageParameter = typeOfPackage != null ?
                new ObjectParameter("TypeOfPackage", typeOfPackage) :
                new ObjectParameter("TypeOfPackage", typeof(string));
    
            var pQNoParameter = pQNo != null ?
                new ObjectParameter("PQNo", pQNo) :
                new ObjectParameter("PQNo", typeof(string));
    
            var pQIdParameter = pQId != null ?
                new ObjectParameter("PQId", pQId) :
                new ObjectParameter("PQId", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var locNumberParameter = locNumber != null ?
                new ObjectParameter("LocNumber", locNumber) :
                new ObjectParameter("LocNumber", typeof(string));
    
            var locAmountParameter = locAmount != null ?
                new ObjectParameter("LocAmount", locAmount) :
                new ObjectParameter("LocAmount", typeof(string));
    
            var noOfPackageParameter = noOfPackage != null ?
                new ObjectParameter("NoOfPackage", noOfPackage) :
                new ObjectParameter("NoOfPackage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Project_Contracts", projectIdParameter, packageIdParameter, packageNameParameter, packageDisplayIdParameter, estimateValueParameter, typeOfPackageParameter, pQNoParameter, pQIdParameter, refParameter, titleParameter, countryParameter, statusParameter, locNumberParameter, locAmountParameter, noOfPackageParameter);
        }
    
        public virtual ObjectResult<Update_ProjectProgress_Result> Update_ProjectProgress(Nullable<int> projectId, Nullable<int> statusId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Update_ProjectProgress_Result>("Update_ProjectProgress", projectIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<UpdateProject_Result> UpdateProject(Nullable<int> id, string name, string description, Nullable<int> status, Nullable<System.DateTime> dprDate, string baselineData, string locationAddress, string locationCordinates, Nullable<int> stage, Nullable<int> subSector, Nullable<bool> preQualification, string authority, Nullable<double> progress, Nullable<double> financialprogress, Nullable<decimal> projectValue, Nullable<System.DateTime> projectStart, Nullable<System.DateTime> projectEnd, string sector, string subsectorname, string address, string note, Nullable<double> physicalprogress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var dprDateParameter = dprDate.HasValue ?
                new ObjectParameter("dprDate", dprDate) :
                new ObjectParameter("dprDate", typeof(System.DateTime));
    
            var baselineDataParameter = baselineData != null ?
                new ObjectParameter("baselineData", baselineData) :
                new ObjectParameter("baselineData", typeof(string));
    
            var locationAddressParameter = locationAddress != null ?
                new ObjectParameter("locationAddress", locationAddress) :
                new ObjectParameter("locationAddress", typeof(string));
    
            var locationCordinatesParameter = locationCordinates != null ?
                new ObjectParameter("locationCordinates", locationCordinates) :
                new ObjectParameter("locationCordinates", typeof(string));
    
            var stageParameter = stage.HasValue ?
                new ObjectParameter("stage", stage) :
                new ObjectParameter("stage", typeof(int));
    
            var subSectorParameter = subSector.HasValue ?
                new ObjectParameter("subSector", subSector) :
                new ObjectParameter("subSector", typeof(int));
    
            var preQualificationParameter = preQualification.HasValue ?
                new ObjectParameter("preQualification", preQualification) :
                new ObjectParameter("preQualification", typeof(bool));
    
            var authorityParameter = authority != null ?
                new ObjectParameter("authority", authority) :
                new ObjectParameter("authority", typeof(string));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("progress", progress) :
                new ObjectParameter("progress", typeof(double));
    
            var financialprogressParameter = financialprogress.HasValue ?
                new ObjectParameter("financialprogress", financialprogress) :
                new ObjectParameter("financialprogress", typeof(double));
    
            var projectValueParameter = projectValue.HasValue ?
                new ObjectParameter("projectValue", projectValue) :
                new ObjectParameter("projectValue", typeof(decimal));
    
            var projectStartParameter = projectStart.HasValue ?
                new ObjectParameter("projectStart", projectStart) :
                new ObjectParameter("projectStart", typeof(System.DateTime));
    
            var projectEndParameter = projectEnd.HasValue ?
                new ObjectParameter("projectEnd", projectEnd) :
                new ObjectParameter("projectEnd", typeof(System.DateTime));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(string));
    
            var subsectornameParameter = subsectorname != null ?
                new ObjectParameter("subsectorname", subsectorname) :
                new ObjectParameter("subsectorname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var physicalprogressParameter = physicalprogress.HasValue ?
                new ObjectParameter("physicalprogress", physicalprogress) :
                new ObjectParameter("physicalprogress", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateProject_Result>("UpdateProject", idParameter, nameParameter, descriptionParameter, statusParameter, dprDateParameter, baselineDataParameter, locationAddressParameter, locationCordinatesParameter, stageParameter, subSectorParameter, preQualificationParameter, authorityParameter, progressParameter, financialprogressParameter, projectValueParameter, projectStartParameter, projectEndParameter, sectorParameter, subsectornameParameter, addressParameter, noteParameter, physicalprogressParameter);
        }
    
        public virtual ObjectResult<string> Monitoring()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Monitoring");
        }
    
        public virtual ObjectResult<string> NightlyTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("NightlyTasks");
        }
    
        public virtual int Get_Color_ChangesFor_Loc(Nullable<int> locId)
        {
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Color_ChangesFor_Loc", locIdParameter);
        }
    
        public virtual ObjectResult<string> Get_Country_Alphabets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_Country_Alphabets");
        }
    
        public virtual int report_Loc_List1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report_Loc_List1");
        }
    
        public virtual int report_Test(string loc_Account_NO)
        {
            var loc_Account_NOParameter = loc_Account_NO != null ?
                new ObjectParameter("Loc_Account_NO", loc_Account_NO) :
                new ObjectParameter("Loc_Account_NO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report_Test", loc_Account_NOParameter);
        }
    
        public virtual ObjectResult<report_Test_11_Result> report_Test_11()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_Test_11_Result>("report_Test_11");
        }
    
        public virtual ObjectResult<report_Alloon_Hatersuus_Result> report_Alloon_Hatersuus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_Alloon_Hatersuus_Result>("report_Alloon_Hatersuus");
        }
    }
}
